void 0:f.join(" -> ")}`):n.logAuthRelatedInfo("inLegacyAPI::setWindowsIdentity",`Failed to set ${i} account, missing Username. 
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`);t.internalSetWindowsIdentity(u)},undefined,f)}}n.substrateProvidersEnabled()&&(n.isCloudSearchEnabledAadCache&&o==1?this.tryConnect(1,null,1,f):n.isCloudSearchEnabledMsaCache&&o==2&&this.tryConnect(0,null,1,f));u()})}enumerateMultiAccountAuthority(u,f){if(f=f&&[...f,"AccessTokenManager::enumerateMultiAccountAuthority"],!SearchAppWrapper.CortanaApp.authenticationManager.getAllSearchWebAccountsAsync){f&&(n.ClientTestHooks===null||n.ClientTestHooks===void 0?void 0:n.ClientTestHooks.authLog(f,"@enumerateMultiAccountAuthority: Goto legacy API (this.enumerateAccountAuthority())"));this.enumerateAccountAuthority(u,f);return}n.Async.safeChain("getAllSearchWebAccountsAsync",()=>SearchAppWrapper.CortanaApp.authenticationManager.getAllSearchWebAccountsAsync(),e=>{f&&(n.ClientTestHooks===null||n.ClientTestHooks===void 0?void 0:n.ClientTestHooks.authLog(f,`@enumerateMultiAccountAuthority: accounts=${n.stringifyISearchWebAccounts(e)}`));!e&&n.logAuthRelatedInfo("getAllSearchWebAccountsAsync",`No accounts retrieved from API.
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`);this.cacheAllAccounts(e,f);let o=[],s=this.getSelectedAccountId();if(this._availableMsaAccounts.length>0){let t=this._availableMsaAccounts.findIndex(n=>n.accountId==s),r=t>=0?t:Math.max(this._availableMsaAccounts.findIndex(n=>n.isDefaultAccount),0),i=this._availableMsaAccounts[r];o.push(i);n.logAuthRelatedInfo("selectedAccount",`Selected MSA account: ${n.stringifyISearchWebAccount(i)}.
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`)}if(this._availableAadAccounts.length>0){let t=this._availableAadAccounts.findIndex(n=>n.accountId==s),r=t>=0?t:Math.max(this._availableAadAccounts.findIndex(n=>n.isDefaultAccount),0),i=this._availableAadAccounts[r];o.push(i);n.logAuthRelatedInfo("selectedAccount",`Selected MSA account: ${n.stringifyISearchWebAccount(i)}.
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`)}if(!n.config.userProfileButtonEnabled)for(let n of o)this.cacheAccount(n,f);const h=t.getWindowsAccountType();if(this.updateWindowsAccountType(o,f),n.config.msbEnableAccountManager&&this.fireAccountsEnumeratedBeforeConnect(),t.getWindowsAccountType()!=h){const u=(i,r)=>{this.getAccount(i,n.getBingResourceOrScope(i),!1,!0,r=>{!r&&n.logAuthRelatedInfo("getAccountOnFailure",`Failed to authenticate authType ${i}.
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`);let u=r&&r.UserName?r.UserName:"";u?n.logAuthRelatedInfo("inNewAPI::setWindowsIdentity",`set to ${i} account
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`):n.logAuthRelatedInfo("inNewAPI::setWindowsIdentity",`Failed to set ${i} account, missing Username. 
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`);t.internalSetWindowsIdentity(u)},r,f)};for(let t of o)t.accountProviderAuthority==i&&n.isCloudSearchEnabledMsaCache?u(0,t):t.accountProviderAuthority==r&&n.isCloudSearchEnabledAadCache&&u(1,t)}(n.isCloudSearchEnabledAadCache||n.isCloudSearchEnabledMsaCache)&&n.substrateProvidersEnabled()&&this.connectAccounts(o,1,f);u()})}promptAutheticateDialog(t,i,r,u,f){f=f&&[...f,"AccessTokenManager::promptAutheticateDialog"];const e=e=>{let o=!!e;t==1?n.isSubstrateO365AccountConnected=o:n.isSubstrateOutlookAccountConnected=o;o?(r(),this._accessTokenAvailableHandlers.forEach(r=>n.safeExecute(()=>r(t,i,2),"promptAccessTokenAvailable",null,`${t}`))):(n.logAuthRelatedInfo("getAccountOnFailure",`Failed to authenticate authType ${t}.
CallStack: ${f===null||f===void 0?void 0:f.join(" -> ")}`),u(),this._verifyAccountRequired.forEach(r=>n.safeExecute(()=>r(t,i,2),"promptAccessTokenAvailable",null,`${t}`)))};this.getAccount(t,i,!1,!1,e,undefined,f)}}t._windowsAccountType=0;n.AccessTokenManager=t}(WSB||(WSB={})),function(n){const r="cohortProfile",u="WSBFirstOpenedDate",f=/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/,i=29;class t{static getSingleton(){return t._singleton||SharedLogHelper.LogError("      const subLength = bufLength - 36;
        const buf = new Uint8Array(bufLength);
        const sub = buf.subarray(0, subLength);
        let pos = 0;
        let out = '';
        for (let i = 0; i < decoded.length; i++) {
            const line = decoded[i];
            if (i > 0) {
                if (pos === bufLength) {
                    out += td.decode(buf);
                    pos = 0;
                }
                buf[pos++] = semicolon;
            }
            if (line.length === 0)
                continue;
            state[0] = 0;
            for (let j = 0; j < line.length; j++) {
                const segment = line[j];
                // We can push up to 5 ints, each int can take at most 7 chars, and we
                // may push a comma.
                if (pos > subLength) {
                    out += td.decode(sub);
                    buf.copyWithin(0, subLength, pos);
                    pos -= subLength;
                }
                if (j > 0)
                    buf[pos++] = comma;
                pos = encodeInteger(buf, pos, state, segment, 0); // genColumn
                if (segment.length === 1)
                    continue;
                pos = encodeInteger(buf, pos, state, segment, 1); // sourcesIndex
                pos = encodeInteger(buf, pos, state, segment, 2); // sourceLine
                pos = encodeInteger(buf, pos, state, segment, 3); // sourceColumn
                if (segment.length === 4)
                    continue;
                pos = encodeInteger(buf, pos, state, segment, 4); // namesIndex
            }
        }
        return out + td.decode(buf.subarray(0, pos));
    }
    function encodeInteger(buf, pos, state, segment, j) {
        const next = segment[j];
        let num = next - state[j];
        state[j] = next;
        num = num < 0 ? (-num << 1) | 1 : num << 1;
        do {
            let clamped = num & 0b011111;
            num >>>= 5;
            if (num > 0)
                clamped |= 0b100000;
            buf[pos++] = intToChar[clamped];
        } while (num > 0);
        return pos;
    }

    exports.decode = decode;
    exports.encode = encode;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=sourcemap-codec.umd.js.map
